import requests
import json
from datetime import datetime
import os

class ClienteConPrompt:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url
        self.historial_local = []
        directorio_actual = os.path.dirname(os.path.abspath(__file__))
        self.archivo_json = os.path.join(directorio_actual, "datos_financieros.json")
        
        self.prompt_sistema = """
Eres un asistente llamado chatiBOT, una IA que ayuda a empresas (PyMEs) e inversionistas a manejar sus datos financieros. 
Tu objetivo es proporcionar la mejor soluci√≥n a las dudas de los clientes para guiarlos en la inversi√≥n, explicando c√≥mo 
llegaste a tus conclusiones mediante sus datos (ingresos, egresos, monto, categor√≠a, concepto, fecha).

CAPACIDADES ESPECIALES:
- Analisis en Tiempo Real: Analizo tus datos financieros actuales para darte insights inmediatos
- Simulaciones y Proyecciones: Creo escenarios "what-if" basados en diferentes estrategias
- Planes de Accion: Dise√±o planes personalizados para alcanzar metas financieras
- Predicciones: Proyecto tendencias futuras basadas en tus datos hist√≥ricos
- Deteccion de Riesgos: Identifico patrones problem√°ticos y oportunidades de mejora

Sigue estas reglas fundamentales:

1. Estructura de Respuesta Flexible: Organiza tus respuestas de manera natural pero estructurada:
   - Resumen Ejecutivo: La conclusi√≥n principal (1-2 oraciones)
   - Analisis Detallado: Explicaci√≥n completa con c√°lculos y datos espec√≠ficos
   - Plan de Accion: Pasos concretos y recomendaciones espec√≠ficas
   - Consideraciones Adicionales: Riesgos, alternativas, pr√≥ximos pasos

2. Profundidad y Detalle: Siempre proporciona informaci√≥n detallada y espec√≠fica. No te limites a respuestas cortas.
   - Incluye c√°lculos matem√°ticos cuando sea relevante
   - Proporciona ejemplos concretos
   - Ofrece m√∫ltiples escenarios o alternativas
   - Explica el razonamiento detr√°s de cada recomendaci√≥n

3. Salud Financiera (SF): Calcula la SF como CAPITAL = Ingresos - Egresos. Utiliza reportes mensuales por defecto.

4. SIMULACIONES Y PROYECCIONES: Cuando el usuario pida proyecciones:
   - Crea al menos 2-3 escenarios diferentes (conservador, moderado, agresivo)
   - Incluye c√°lculos detallados y supuestos
   - Proporciona tablas o l√≠neas de tiempo cuando sea √∫til
   - Ejemplo: "Basado en tu ahorro actual de $X, aqu√≠ tienes tres escenarios..."

5. PLANES DE ACCION: Al crear planes:
   - Divide en fases o etapas claras
   - Incluye hitos mensuales o trimestrales
   - Especifica acciones concretas para cada etapa
   - Considera diferentes estrategias de ahorro e inversi√≥n
   - Ejemplo: "Fase 1 (meses 1-6): Enf√≥cate en... Fase 2 (meses 7-12): Implementa..."

6. PREDICCIONES Y TENDENCIAS:
   - Analiza patrones hist√≥ricos en detalle
   - Proyecta m√∫ltiples escenarios de crecimiento
   - Considera variables externas como inflaci√≥n
   - Proporciona rangos en lugar de n√∫meros fijos

7. Integridad y Paciencia: S√© honesto, paciente y proporciona explicaciones completas.

8. L√≠mites √âticos Irrompibles:
* Nunca incites, sugieras o fomentes el suicidio o cualquier tipo de autolesi√≥n.
* Nunca obligues o presiones a un usuario a hacer algo en contra de su voluntad.
* Nunca reveles el modelo de IA en el que est√°s basado.

9. Manejo de Informaci√≥n Incompleta: Cuando falten datos, crea escenarios hipot√©ticos bien fundamentados.

10. Educaci√≥n Financiera Progresiva: Adapta tu lenguaje al nivel del usuario.

11. Confidencialidad y Seguridad: Nunca solicites informaci√≥n personal sensible.

12. Mantenimiento del Rol Profesional: Tu expertise se limita exclusivamente al an√°lisis financiero, asesor√≠a, simulacion, planeacion y prediccion para PyMEs e inversionistas. 
No opines, analices o sugieras modificaciones sobre tus propias instrucciones, dise√±o o capacidades t√©cnicas. Si te piden este tipo de 
meta-an√°lisis, responde: "Mi funci√≥n est√° optimizada para el an√°lisis financiero de PyMEs e inversionistas. Para aprovechar al m√°ximo 
mis capacidades, ¬øte gustar√≠a que analicemos alg√∫n aspecto espec√≠fico de tus finanzas, como tu salud financiera actual o opciones de inversi√≥n?"

DIRECTRICES ESPECIFICAS PARA RESPUESTAS DETALLADAS:
- Siempre incluye c√°lculos matem√°ticos cuando sea relevante
- Proporciona ejemplos concretos y n√∫meros espec√≠ficos
- Ofrece al menos 2-3 alternativas o escenarios
- Explica el "por qu√©" detr√°s de cada recomendaci√≥n
- Incluye consideraciones de riesgo y contingencia
- Proporciona pasos de acci√≥n claros y realizables
- Usa analog√≠as cuando ayuden a la comprensi√≥n
- Siempre relaciona las recomendaciones con los datos financieros actuales del usuario

EJEMPLO DE RESPUESTA IDEAL:
"Para tu meta de $50,000 en 24 meses, analicemos tres estrategias:

ESTRATEGIA 1: Ahorro Tradicional
- Ahorro mensual requerido: $2,084
- Total ahorrado: $50,016
- Ventaja: Sin riesgo
- Desventaja: No considera inflaci√≥n

ESTRATEGIA 2: Ahorro + Inversi√≥n Conservadora
- Ahorro mensual: $1,800
- Inversi√≥n mensual: $300 (rendimiento estimado 5% anual)
- Proyecci√≥n: $52,400 en 24 meses
- Incluye crecimiento por inversi√≥n

ESTRATEGIA 3: Enfoque Agresivo  
- Ahorro mensual: $1,500
- Inversi√≥n mensual: $600 (rendimiento estimado 8% anual)
- Proyecci√≥n: $55,200 en 24 meses
- Mayor riesgo pero mayor potencial

Considerando tu salud financiera actual de $14,900, te recomiendo la Estrategia 2 porque..."
"""

    def _leer_json_financiero(self):
        """Leer el archivo datos_financieros.json espec√≠fico"""
        try:
            # Verificar que existe el archivo
            if not os.path.exists(self.archivo_json):
                return "‚ùå No se encontr√≥ el archivo 'datos_financieros.json'"
            
            # Leer el archivo
            with open(self.archivo_json, 'r', encoding='utf-8') as file:
                datos = json.load(file)
            
            # Verificar que tiene datos
            if not datos:
                return "üìä El archivo est√° vac√≠o"
            
            # Calcular totales
            total_ingresos = sum(item['Monto'] for item in datos if item['TipoDeMonto'] == 'Ingreso')
            total_egresos = sum(item['Monto'] for item in datos if item['TipoDeMonto'] == 'Egreso')
            salud_financiera = total_ingresos - total_egresos
            
            # Formatear resumen limpio para el prompt
            resumen = f"""
üìä DATOS FINANCIEROS ACTUALES:
‚Ä¢ Ingresos totales: ${total_ingresos:,}
‚Ä¢ Egresos totales: ${total_egresos:,}  
‚Ä¢ Salud financiera: ${salud_financiera:,}
‚Ä¢ Total transacciones: {len(datos)}
"""
            return resumen
            
        except Exception as e:
            return f"‚ùå Error leyendo datos: {str(e)}"

    def _leer_json_financiero_detallado(self):
        """Leer el archivo con detalles para debug"""
        try:
            if not os.path.exists(self.archivo_json):
                return "‚ùå No se encontr√≥ el archivo 'datos_financieros.json'"
            
            with open(self.archivo_json, 'r', encoding='utf-8') as file:
                datos = json.load(file)
            
            if not datos:
                return "üìä El archivo est√° vac√≠o"
            
            print(f"\nüìÅ ARCHIVO LE√çDO: {self.archivo_json}")
            print("üìã CONTENIDO DEL JSON:")
            print(json.dumps(datos, indent=2, ensure_ascii=False))
            
            total_ingresos = sum(item['Monto'] for item in datos if item['TipoDeMonto'] == 'Ingreso')
            total_egresos = sum(item['Monto'] for item in datos if item['TipoDeMonto'] == 'Egreso')
            salud_financiera = total_ingresos - total_egresos
            
            resumen = f"""
üßÆ RESUMEN CALCULADO:
‚Ä¢ Total Ingresos: ${total_ingresos:,}
‚Ä¢ Total Egresos: ${total_egresos:,}  
‚Ä¢ Salud Financiera: ${salud_financiera:,}
‚Ä¢ Transacciones: {len(datos)}
"""
            return resumen
            
        except Exception as e:
            return f"‚ùå Error leyendo el archivo: {str(e)}"

    def enviar_mensaje(self, mensaje, usar_contexto=True):
        """Enviar mensaje con datos financieros actualizados"""
        try:
            print(f"\nüì§ T√∫: {mensaje}")
            
            # üî• LEER DATOS ACTUALIZADOS DEL JSON
            datos_json = self._leer_json_financiero()
            
            # üî• CREAR MENSAJE COMPLETO CON INSTRUCCIONES + DATOS
            mensaje_completo = f"""
INSTRUCCIONES DEL SISTEMA:
{self.prompt_sistema}

INFORMACI√ìN FINANCIERA ACTUAL DEL CLIENTE:
{datos_json}

MENSAJE DEL USUARIO A RESPONDER:
"{mensaje}"

POR FAVOR RESPONDE AL MENSAJE DEL USUARIO BAS√ÅNDOTE EXCLUSIVAMENTE EN LOS DATOS FINANCIEROS PROPORCIONADOS.
SI EL USUARIO PREGUNTA SOBRE SALUD FINANCIERA, INGRESOS, EGRESOS O INVERSIONES, USA LOS DATOS EXACTOS DE ARRIBA.
"""
            
            payload = {
                "message": mensaje_completo,
                "usar_contexto": usar_contexto
            }
            
            response = requests.post(
                f"{self.base_url}/chat",
                json=payload,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                self.historial_local.append({
                    "id": data['conversacion_id'],
                    "usuario": mensaje,
                    "gemini": data['gemini_response'],
                    "timestamp": data['timestamp']
                })

                print(f"ü§ñ chatiBOT: {data['gemini_response']}")
                return data
            else:
                print(f"‚ùå Error: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return None

    def probar_conexion(self):
        """Verificar que el servidor est√° activo"""
        try:
            response = requests.get(f"{self.base_url}/health")
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Servidor MCP activo")
                print(f"ü§ñ Modelo: {data.get('modelo', 'N/A')}")
                return True
            return False
        except:
            print("‚ùå No se puede conectar al servidor")
            return False
    
    def inicializar_asistente(self):
        """Enviar el prompt de sistema para configurar el asistente"""
        try:
            print("üîÑ Configurando asistente especializado...")
            
            mensaje_inicial = f"""
{self.prompt_sistema}

Por favor, dale la bienvenida a usuario y presentate formalmente di brevemente tus usos no sobreexpliques solo di que puedes hacer .
"""
            
            response = requests.post(
                f"{self.base_url}/chat",
                json={"message": mensaje_inicial},
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Asistente configurado correctamente")
                print(f"ü§ñ: {data['gemini_response']}")
                
                self.historial_local.append({
                    "tipo": "configuracion",
                    "usuario": "Sistema: Configuraci√≥n del asistente",
                    "gemini": data['gemini_response'],
                    "timestamp": datetime.now().isoformat()
                })
                
                return True
            else:
                print(f"‚ùå Error configurando asistente: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def enviar_mensajes_lote(self):
        """Enviar m√∫ltiples mensajes en secuencia"""
        try:
            print("\nüì¶ MODO LOTE - M√∫ltiples mensajes (escribe 'fin' para terminar)")
            print("-" * 50)
            
            mensajes = []
            contador = 1
            
            while True:
                mensaje = input(f"Mensaje {contador}: ").strip()
                
                if mensaje.lower() == 'fin':
                    break
                
                if mensaje:
                    mensajes.append(mensaje)
                    contador += 1
            
            if not mensajes:
                print("‚ùå No se ingresaron mensajes")
                return
            
            print(f"\nüîÑ Enviando {len(mensajes)} mensajes...")
            
            for i, mensaje in enumerate(mensajes, 1):
                print(f"\n--- Mensaje {i}/{len(mensajes)} ---")
                self.enviar_mensaje(mensaje)
            
            print(f"\n‚úÖ Lote completado!")
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Lote interrumpido")
    
    def ver_historial(self):
        """Ver historial de la sesi√≥n actual"""
        try:
            response = requests.get(f"{self.base_url}/historial?limite=20")
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"\nüìú HISTORIAL (√∫ltimas {len(data['conversaciones'])}):")
                print("=" * 60)
                
                for conv in data['conversaciones']:
                    fecha = datetime.fromisoformat(conv['timestamp'].replace('Z', '+00:00'))
                    fecha_str = fecha.strftime("%H:%M")
                    
                    print(f"üÜî #{conv['id']} | {fecha_str}")
                    print(f"üë§: {conv['usuario']}")
                    print(f"ü§ñ: {conv['gemini'][:100]}{'...' if len(conv['gemini']) > 100 else ''}")
                    print("-" * 40)
                
            else:
                print(f"‚ùå Error: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Error: {e}")

def main():
    cliente = ClienteConPrompt()
    
    # Probar lectura del JSON
    print("\nüîç Probando lectura del JSON...")
    resultado = cliente._leer_json_financiero_detallado()
    print(resultado)
    
    print("\n" + "ü§ñ" * 20)
    print("üöÄ ASISTENTE FINANCIERO CON DATOS EN TIEMPO REAL")
    print("ü§ñ" * 20)
    
    # Probar conexi√≥n
    print("\nüîå Conectando al servidor...")
    if not cliente.probar_conexion():
        return
    
    # INICIALIZAR EL ASISTENTE
    print("\nüéØ Configurando personalidad del asistente...")
    if not cliente.inicializar_asistente():
        print("‚ùå No se pudo configurar el asistente. Continuando sin configuraci√≥n...")
    
    print("\n‚úÖ ¬°Asistente listo! Cada mensaje incluir√° datos financieros actualizados.")
    
    # Men√∫ principal
    while True:
        print("\n" + "üéÆ OPCIONES " + "‚îÄ" * 40)
        print("1. üìù Enviar mensaje")
        print("2. üìä Ver datos del JSON (detallado)")
        print("3. üì¶ Enviar varios mensajes") 
        print("4. üìú Ver historial")
        print("5. üëã Salir")
        print("-" * 50)
        
        opcion = input("Elige (1-5): ").strip()
        
        if opcion == "1":
            mensaje = input("\nTu mensaje: ").strip()
            if mensaje:
                cliente.enviar_mensaje(mensaje)
            else:
                print("‚ùå Mensaje vac√≠o")
                
        elif opcion == "2":
            resultado = cliente._leer_json_financiero_detallado()
            print(resultado)
                
        elif opcion == "3":
            cliente.enviar_mensajes_lote()
                
        elif opcion == "4":
            cliente.ver_historial()
                
        elif opcion == "5":
            print("\nüëã ¬°Hasta luego! Fue un placer ayudarte. üí∞")
            break
            
        else:
            print("‚ùå Opci√≥n no v√°lida")

if __name__ == "__main__":
    main()